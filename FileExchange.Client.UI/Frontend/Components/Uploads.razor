@using FileExchange.Client.UI.Services
@inject UploadTrackingService UploadTracking

<MudTable Items="@UploadTracking.Uploads" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Path</MudTh>
        <MudTh>Duration</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">
            <MudTooltip Text="@context.Id.ToString()">
                <MudIcon Icon="@Icons.Material.Filled.FileUpload" Title="FileUpload"></MudIcon>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Path">@context.Path</MudTd>
        <MudTd DataLabel="Duration">@context.Duration ms</MudTd>
        <MudTh DataLabel="Status">
            @switch (context.Status)
            {
                case UploadStatus.Started:
                    <MudChip T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Primary">@context.Status</MudChip>
                    break;
                case UploadStatus.Success:
                    <MudChip T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">@context.Status</MudChip>
                    break;
                case UploadStatus.Failed:
                    <MudChip T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Error">@context.Status</MudChip>
                    break;
                default:
                    <MudChip T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Error">Invalid State</MudChip>
                    break;
            }
        </MudTh>
    </RowTemplate>
</MudTable>

@code
{
    protected override Task OnInitializedAsync()
    {
        UploadTracking.UploadChanged += UploadTrackingOnUploadChanged;
        return Task.CompletedTask;
    }

    private void UploadTrackingOnUploadChanged(object? sender, Upload e)
    {
        InvokeAsync(StateHasChanged).GetAwaiter().GetResult();
    }
}